name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION_DEFAULT: "3.10"

jobs:
  # Backend Testing and Quality Checks
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
        cache: 'pip'
        cache-dependency-path: 'apps/api/requirements.txt'

    - name: Install dependencies
      working-directory: apps/api
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov safety bandit

    - name: Run tests with coverage
      working-directory: apps/api
      run: |
        python -m pytest tests/ -v \
          --cov=. \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term \
          --cov-fail-under=80
      env:
        PYTHONPATH: .

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./apps/api/coverage.xml
        directory: ./apps/api/
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

    - name: Archive coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage-report
        path: apps/api/htmlcov/
        retention-days: 7

    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: backend-test-results
        path: apps/api/pytest-results.xml
        retention-days: 7

  # Security and Code Quality
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: []
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
        cache: 'pip'
        cache-dependency-path: 'apps/api/requirements.txt'

    - name: Install dependencies
      working-directory: apps/api
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit semgrep

    - name: Run Safety (Python dependency vulnerability scanner)
      working-directory: apps/api
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: Run Bandit (Python security linter)
      working-directory: apps/api
      run: |
        bandit -r main.py -f json -o bandit-report.json || true
        bandit -r main.py

    - name: Run Semgrep (Static analysis)
      run: |
        semgrep --config=auto --json --output=semgrep-report.json apps/api/ || true
        semgrep --config=auto apps/api/

    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          apps/api/safety-report.json
          apps/api/bandit-report.json
          semgrep-report.json
        retention-days: 30

  # NPM Security Audit
  npm-security:
    name: NPM Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install root dependencies
      run: npm ci

    - name: NPM Audit
      run: |
        npm audit --audit-level=moderate --json > npm-audit-report.json || true
        npm audit --audit-level=moderate

    - name: Upload NPM audit report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: npm-audit-report
        path: npm-audit-report.json
        retention-days: 30

  # Docker Build Validation
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build API Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.api
        push: false
        load: true
        tags: motion-detector-api:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test API Docker container
      run: |
        docker run --rm -d --name api-test -p 8000:8000 motion-detector-api:test
        
        # Wait for container to start and check health with retries
        echo "Waiting for API container to start..."
        max_attempts=15
        attempt=0
        while [ $attempt -lt $max_attempts ]; do
          if curl -f http://localhost:8000/health; then
            echo "✅ API health check passed"
            break
          fi
          echo "Attempt $((attempt+1))/$max_attempts failed, retrying in 3s..."
          sleep 3
          attempt=$((attempt+1))
        done
        
        if [ $attempt -eq $max_attempts ]; then
          echo "❌ API health check failed after $max_attempts attempts"
          echo "Container logs:"
          docker logs api-test
          docker stop api-test
          exit 1
        fi
        
        docker stop api-test

  # Docker Smoke Test
  docker-smoke-test:
    name: Docker Smoke Test
    runs-on: ubuntu-latest
    needs: [backend-test]
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install root dependencies
      run: npm ci


    - name: Start services with Docker Compose
      run: |
        echo "Starting Docker Compose services..."
        docker compose -f docker/docker-compose.yml up --build -d
        
        # Wait for services to be ready
        echo "Waiting for services to start..."
        sleep 30
        
        echo "Checking if containers started successfully..."
        docker compose -f docker/docker-compose.yml ps

    - name: Check service health
      run: |
        # Check what containers are running
        echo "Checking running containers:"
        docker ps
        echo ""
        
        # Check Docker Compose services status
        echo "Docker Compose services status:"
        docker compose -f docker/docker-compose.yml ps
        echo ""
        
        # Test API health endpoint
        echo "Testing API health..."
        max_attempts=20
        attempt=0
        while [ $attempt -lt $max_attempts ]; do
          if curl -f http://localhost:8000/health; then
            echo "✅ API health check passed"
            break
          fi
          echo "Attempt $((attempt+1))/$max_attempts failed, retrying in 3s..."
          sleep 3
          attempt=$((attempt+1))
        done
        
        if [ $attempt -eq $max_attempts ]; then
          echo "❌ API health check failed after $max_attempts attempts"
          echo ""
          echo "=== API Container Logs ==="
          docker compose -f docker/docker-compose.yml logs api
          echo ""
          echo "=== Web Container Logs ==="
          docker compose -f docker/docker-compose.yml logs web
          exit 1
        fi

    - name: Test API endpoints
      run: |
        # Test AI prompts endpoint
        echo "Testing AI prompts endpoint..."
        curl -f http://localhost:8000/api/v1/ai/prompts || (echo "❌ AI prompts endpoint failed" && exit 1)
        echo "✅ AI prompts endpoint passed"
        
        # Test queue status endpoint  
        echo "Testing queue status endpoint..."
        curl -f http://localhost:8000/api/v1/queue/status || (echo "❌ Queue status endpoint failed" && exit 1)
        echo "✅ Queue status endpoint passed"

    - name: Test web application
      run: |
        # Test web app availability directly
        echo "Testing web application..."
        max_attempts=5
        attempt=0
        while [ $attempt -lt $max_attempts ]; do
          if curl -f http://localhost:3000/; then
            echo "✅ Web application is accessible"
            break
          fi
          echo "Attempt $((attempt+1))/$max_attempts failed, retrying in 5s..."
          sleep 5
          attempt=$((attempt+1))
        done
        
        if [ $attempt -eq $max_attempts ]; then
          echo "❌ Web application not accessible after $max_attempts attempts"
          echo ""
          echo "=== Web Container Logs ==="
          docker compose -f docker/docker-compose.yml logs web || true
          exit 1
        fi

    - name: Check Docker container logs
      if: always()
      run: |
        echo "=== API Container Logs ==="
        docker compose -f docker/docker-compose.yml logs api || true
        echo ""
        echo "=== Web Container Logs ==="
        docker compose -f docker/docker-compose.yml logs web || true

    - name: Cleanup Docker services
      if: always()
      run: |
        echo "Stopping Docker services..."
        docker compose -f docker/docker-compose.yml down -v --remove-orphans || true
        docker system prune -f || true

  # Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-test]
    
    # services:
      # Add any required services like databases here
      # mysql:
      #   image: mysql:8.0
      #   env:
      #     MYSQL_ROOT_PASSWORD: testpass
      #     MYSQL_DATABASE: motion_detector_test
      #   ports:
      #     - 3306:3306
      #   options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
        cache: 'pip'
        cache-dependency-path: 'apps/api/requirements.txt'

    - name: Install dependencies
      working-directory: apps/api
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Start API server
      working-directory: apps/api
      run: |
        uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 5
      env:
        PYTHONPATH: .

    - name: Run integration tests
      working-directory: apps/api
      run: |
        python -m pytest tests/ -v -m "integration" --tb=short || echo "No integration tests marked"
        
        # Basic API health check
        curl -f http://localhost:8000/health
        
        # Test API endpoints (AI analysis endpoints)
        curl -f http://localhost:8000/api/v1/ai/prompts

    - name: Stop services
      if: always()
      run: |
        pkill -f uvicorn || true

  # Linting and Code Quality
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy

    - name: Check code formatting with Black
      working-directory: apps/api
      run: |
        black --check --diff .

    - name: Check import sorting with isort
      working-directory: apps/api
      run: |
        isort --check-only --diff .

    - name: Lint with flake8
      working-directory: apps/api
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Type check with mypy (optional, may fail)
      working-directory: apps/api
      continue-on-error: true
      run: |
        mypy . --ignore-missing-imports || echo "MyPy check completed with errors (non-blocking)"

  # Frontend Build and Type Check
  frontend-build:
    name: Frontend Build & Type Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install root dependencies
      run: npm ci

    - name: Install frontend dependencies
      working-directory: apps/web
      run: npm ci

    - name: Type check frontend
      working-directory: apps/web
      run: npm run type-check

    - name: Build frontend
      working-directory: apps/web
      run: npm run build

    - name: Verify build output
      working-directory: apps/web
      run: |
        if [ ! -d "dist" ]; then
          echo "❌ Build output directory not found"
          exit 1
        fi
        echo "✅ Frontend build completed successfully"

  # Build Job
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [backend-test, security-scan, frontend-build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
        cache: 'pip'
        cache-dependency-path: 'apps/api/requirements.txt'

    - name: Install dependencies
      working-directory: apps/api
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Validate API startup
      working-directory: apps/api
      run: |
        python -c "from main import app; print('✅ API application imports successfully')"
      env:
        PYTHONPATH: .

    - name: Create deployment summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend**: FastAPI application validated ✅" >> $GITHUB_STEP_SUMMARY
        echo "- **Tests**: All backend tests passed ✅" >> $GITHUB_STEP_SUMMARY
        echo "- **Security**: Security scans completed ✅" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker**: Container build validated ✅" >> $GITHUB_STEP_SUMMARY

  # Final Status Check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [backend-test, security-scan, npm-security, docker-build, docker-smoke-test, integration-test, code-quality, frontend-build, build]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        if [[ "${{ needs.backend-test.result }}" != "success" ]]; then
          echo "❌ Backend tests failed"
          exit 1
        fi
        if [[ "${{ needs.security-scan.result }}" != "success" ]]; then
          echo "❌ Security scan failed"
          exit 1
        fi
        if [[ "${{ needs.npm-security.result }}" != "success" ]]; then
          echo "❌ NPM security audit failed"
          exit 1
        fi
        if [[ "${{ needs.docker-build.result }}" != "success" ]]; then
          echo "❌ Docker build failed"
          exit 1
        fi
        if [[ "${{ needs.docker-smoke-test.result }}" != "success" ]]; then
          echo "❌ Docker smoke test failed"
          exit 1
        fi
        if [[ "${{ needs.integration-test.result }}" != "success" ]]; then
          echo "❌ Integration tests failed"
          exit 1
        fi
        if [[ "${{ needs.code-quality.result }}" != "success" ]]; then
          echo "❌ Code quality checks failed"
          exit 1
        fi
        if [[ "${{ needs.frontend-build.result }}" != "success" ]]; then
          echo "❌ Frontend build failed"
          exit 1
        fi
        if [[ "${{ needs.build.result }}" != "success" ]]; then
          echo "❌ Build failed"
          exit 1
        fi
        echo "✅ All CI checks passed successfully!"

    - name: Update PR status
      if: github.event_name == 'pull_request'
      run: |
        echo "## 🎉 CI Pipeline Success!" >> $GITHUB_STEP_SUMMARY
        echo "All quality gates have passed:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Backend tests (Python ${{ env.PYTHON_VERSION_DEFAULT }})" >> $GITHUB_STEP_SUMMARY  
        echo "- ✅ Security scans (Safety, Bandit, Semgrep)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ NPM security audit" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Docker build validation" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Docker smoke test (full stack)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Integration testing" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Code quality checks (Black, isort, flake8)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Frontend build & TypeScript validation" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Application build validation" >> $GITHUB_STEP_SUMMARY